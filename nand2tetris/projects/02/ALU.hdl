// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //salida de zx
    Mux16(a=x, b=false, sel=zx, out=salidaZX);

    //salida de NX
    Not16(in=salidaZX, out=notZX);
    Mux16(a=salidaZX, b=notZX, sel=nx, out=salidaNX);

    //salida de ZY
    Mux16(a=y, b=false, sel=zy, out=salidaZY);

    //salida de NY
    Not16(in=salidaZY, out=notZY);
    Mux16(a=salidaZY, b=notZY, sel=ny, out=salidaNY);

    //operacion aritmetica de suma
    Add16(a=salidaNX, b=salidaNY, out=sumaXY);

    //operacion logica and
    And16(a=salidaNX, b=salidaNY, out=andXY);
    
    //seleccionando la funcion (f)
    Mux16(a=andXY, b=sumaXY, sel=f, out=backOut);

    //elijiendo slaida negaga o sin negar (no)
    Not16(in=backOut, out=notOut);
    Mux16(a=backOut, b=notOut, sel=no, out=out, out[15]=ng, out[0..7] = paraElPrimerOr, out[8..15] = paraElSegundoOr);
    /*no podemos acceder al bus de una variable interna,
    solo las que se indica en IN, las de OUT tampoco se puede acceder
    por tanto al generar la salida generacmos las que nesesitamos
    */


    /*
    para que out sea cero es que todos los numeros
    de out son ceros, usar un or entre todos, cuando
    da cero es cuando todos son cero, el resto da uno, 
    por tanto solo queda invertir la salida
    como solo tenemos or de 8 entre si, tocca aplicar
    dos de estos y de ultimo un or normal entre anmas salidas
    */
    Or8Way(in=paraElPrimerOr, out=primerOr);
    Or8Way(in=paraElSegundoOr, out=segundoOr);
    Or(a=primerOr, b=segundoOr, out=or16out);
    Not(in=or16out, out=zr);
}