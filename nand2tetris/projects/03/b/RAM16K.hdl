// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // en esta ocacion serian solo 4 ram's de 4k cada una,
    //para asi completar los 16k de registros
    //seleccionamos a cual de los 4 registros mandar el load
    DMux4Way(in=load, sel=address[0..1], a=loadR1, b=loadR2, c=loadR3, d=loadR4);

    //mandamos el load a las respectivas ram's de 4k
    //y mandamos el address para que haga el respectivo cambio
    RAM4K(in=in, load=loadR1, address=address[2..13], out=ram4KN1);
    RAM4K(in=in, load=loadR2, address=address[2..13], out=ram4KN2);
    RAM4K(in=in, load=loadR3, address=address[2..13], out=ram4KN3);
    RAM4K(in=in, load=loadR4, address=address[2..13], out=ram4KN4);

    //selecionamos entre los 4 registros devueltos por las ram's de 4k
    Mux4Way16(a=ram4KN1, b=ram4KN2, c=ram4KN3, d=ram4KN4, sel=address[0..1], out=out);
}