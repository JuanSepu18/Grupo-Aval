// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // seleccionamos a donde mandar el loand
    // entre las 8 ram de 64
    DMux8Way(in=load, sel=address[0..2], a=loadR1, b=loadR2, c=loadR3, d=loadR4, e=loadR5, f=loadR6, g=loadR7, h=loadR8);

    //ahora hacemos la repectiva asignacion del input en la ram de 64
    RAM64(in=in, load=loadR2, address=address[3..8], out=ram64N2);
    RAM64(in=in, load=loadR1, address=address[3..8], out=ram64N1);
    RAM64(in=in, load=loadR3, address=address[3..8], out=ram64N3);
    RAM64(in=in, load=loadR4, address=address[3..8], out=ram64N4);
    RAM64(in=in, load=loadR5, address=address[3..8], out=ram64N5);
    RAM64(in=in, load=loadR6, address=address[3..8], out=ram64N6);
    RAM64(in=in, load=loadR7, address=address[3..8], out=ram64N7);
    RAM64(in=in, load=loadR8, address=address[3..8], out=ram64N8);

    //ahora seleccionamos uno de los registro devueltos por la ram64
    Mux8Way16(a=ram64N1, b=ram64N2, c=ram64N3, d=ram64N4, e=ram64N5, f=ram64N6, g=ram64N7, h=ram64N8, sel=address[0..2], out=out);
}