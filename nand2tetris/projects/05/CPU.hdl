// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 


 La CPU (Unidad Central de Proceso) de Hack, compuesta por una ALU,
 dos registros denominados A y D, y un contador de programa denominado 
 PC. La CPU está diseñada para obtener y ejecutar instrucciones escritas
  en el lenguaje de máquina Hack. En concreto, funciona de la siguiente 
  manera Ejecuta la instrucción introducida de acuerdo con la especificación 
  del lenguaje de máquina Hack. D y A en la especificación del lenguaje se 
  refieren a los registros residentes en la CPU, mientras que M se refiere 
  a la posición de memoria externa a la que se dirige A, es decir, a Memory[A]. 
  La entrada inM contiene el valor de esta posición. Si la instrucción actual 
  necesita escribir un valor en M, el valor se coloca en outM, la dirección 
  de la ubicación de destino se coloca en la salida addressM, y se activa el 
  bit de control writeM. (Cuando writeM==0, cualquier valor puede aparecer en 
  outM). Las salidas outM y writeM son combinacionales: se ven afectadas 
  instantáneamente por la ejecución de la instrucción actual. Las salidas 
  addressM y pc son de reloj: aunque se ven afectadas por la ejecución de la 
  instrucción actual, se comprometen con sus nuevos valores sólo en el 
  siguiente paso de tiempo. Si reset==1 entonces la CPU salta a la 
  dirección 0 (es decir, pc se pone a 0 en el siguiente paso de tiempo) 
  en lugar de  que a la dirección resultante de ejecutar la instrucción actual.


 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //si el opcode es 1 es una instruccion tipo C, de lo contrario es tipo A
    //si es tipo A almacenamos la instruccion
    Not(in=instruction[15], out=instructionA);

    //almacenamos si es instruccion C en una variable para hacer las cosas mas faciles
    Not(in=instructionA, out=instructionC);

    //hacemos el primer mux para seleccionar entre la instruccion y la salida del alu
    Mux16(a=outALU, b=instruction, sel=instructionA, out=inRegisterA);

    //para alacenar el registro tipo A debe coincider que sea una instruccion tipo A
    //O (or) el dest perteneciente a A sea 1 (instruction[5])
    Or(a=instructionA, b=instruction[5], out=loadA);

    //guardamos el registro A
    ARegister(in=inRegisterA, load=loadA, out=A, out[0..14]=addressM);
    //nota, el addressM es el mismo A, pero este colo almacena 15 bits y no 16, el bit
    //numero 15 (A[15]) deriva de opcode, por tanto solo tomaremos del 0 al 14
    // es decir A[0..14]

    //para poder almacenar el registro D tiene que ser una instruccion tipo C
    // Y (and) su vez, el dest perteneciente a D tiene que ser 1 (instruction[4])
    And(a=instructionC, b=instruction[4], out=loadD);

    //almacenamos el registro D
    DRegister(in=outALU, load=loadD, out=D);

    //para seleccionar entre la entrada A y la entrada M (inM)
    //tiene que coincidir que sea una instruccion tipo C (instructionC)
    //Y (and) el seleccionador de instruccion de A y M (A_M o instruction[12])
    And(a=instructionC, b=instruction[12], out=selectionAM);

    //segundo mux entre inM y el registro A y arrojomos la entrada Y del ALU
    Mux16(a=A, b=inM, sel=selectionAM, out=inYALU);

    //para la salida writeM tiene que coincide que sea una instruccion tipo C
    //Y (and) el dest de M (instruction[3])
    And(a=instruction[3], b=instructionC, out=writeM);

    //calculo entre la entrada de ALU, y el registro D, con entrada de C's de la instruction,
    //va en ese orden de ZX hasta NO en el orden de instruction[11] a la instruction[6]
    ALU(x=D, y=inYALU, 
    zx=instruction[11], 
    nx=instruction[10], 
    zy=instruction[9], 
    ny=instruction[8], 
    f=instruction[7], 
    no=instruction[6],

    out=outALU, //out para retroalimentar
    out=outM, //salida de M

    zr=zrALU, //si es igual a cero
    ng=ngALU //si es menor a cero
    );

    //ahora continuamos para el pc, para eso nos ayudamos con la tabla de jumps
    //los 3 bits de jump son del 0 al 2 (instruction[0..2]) junto a las salidas 
    //zr y ng del ALU
    //el bit 0 corresponde al G (mayor)
    //el bit 1 corresponde al E (igual)
    //el bit 2 corresponde al L (menor)

    //JGT, si es mayor a cero: para esto no puede ser ni negativo (ng=0)
    //ni igual a cero (zr=0), y indicar con el bit G (bit 0)
    Or(a=ngALU, b=zrALU, out=notJGT);
    Not(in=notJGT, out=isJGT);
    And(a=isJGT, b=instruction[0], out=JGT);

    //JEQ, este es mas sencillo, solo tenemos que coincidir que sea cero
    //que con zr de la ALU me lo indica, y que el bit E (bit 1) sea 1
    And(a=zrALU, b=instruction[1], out=JEQ);

    //JLT, este es similar al anterior, esta vez tengo que mirar si es negativo con
    //ng y que me lo indique la instruccion con el bit L (bit 2)
    And(a=ngALU, b=instruction[2], out=JLT);

    //de aqui en adelante para los demas podemos combinar, los 3 ya creados
    //para los demas jump

    //JGE; mayor o igual a cero, para eso tiene que ser JGT or JEQ
    Or(a=JGT, b=JEQ, out=JGE);

    //JNE; no igual a cero, para eso tiene que ser not JEQ
    Not(in=JEQ, out=JNE);

    //JLE; igual o menor a cero, para eso tiene que ser JLT or JEQ
    Or(a=JLT, b=JEQ, out=JLE);

    //si se cumplen alguna de las anteriores entonces tenemos un JMP, 
    //la forma mas rapido de saberlo es usando el JLE (menor o igual a cero)
    //y JGT (mayor a cero), con esto abarcamos tanto el cero como los
    //positimos y los negativos
    Or(a=JLE, b=JGT, out=JMP);

    //la unica manera de que no cargue en pc, es que los 3 jumps sean
    //cero, es decir que si JMP no es 1, no se hace el jumpl, pero ademas 
    //tiene que cumplirse que sea una instruccion tipo C
    And(a=JMP, b=instructionC, out=loadPC);

    //para que se cargue el pc nesesitamos le load, que ya esta, e indicar
    //si se incrementa o no, para saber si se incrementa es sencillo
    //si loadPC es 1 indica que hay que cargar algo, por tanto no hay incremento
    //pero si es cero, como no hay que cargar nada entonces tiene que incrementar
    Not(in=loadPC, out=incrementPC);

    //la entrada de PC es el registro de A y la salida es de 15 bits, sin
    //usar lo derivada de upcode, es decir out[0..14] y el reset es una entrada
    PC(in=A, load=loadPC, inc=incrementPC, reset=reset, out[0..14]=pc);
}